'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Consistency Measure: All functions require a JS date object as the only variable.
exports.default = {
  getMinutes: function getMinutes(date) {
    return date.getMinutes();
  },
  getMeridiemFromDate: function getMeridiemFromDate(date) {
    var hour = date.getHours();
    return hour >= 12 ? 'pm' : 'am';
  },
  isAM: function isAM() {
    return this.getMeridiem() === 'am';
  },
  isPM: function isPM() {
    return this.getMeridiem() === 'pm';
  },
  getMeridiemHour: function getMeridiemHour(date) {
    var hour = date.getHours();

    if (hour === 0) {
      hour = 12;
    } else if (hour > 12) {
      hour -= 12;
    }

    return hour;
  },
  buildDateFromMeridiem: function buildDateFromMeridiem(date, hour, minute, meridiem) {
    var parsedHour = parseInt(hour, 10);
    if (meridiem === 'pm' && parsedHour === 12) {
      date.setHours(12);
    } else if (meridiem === 'pm') {
      date.setHours(parsedHour + 12);
    } else if (parsedHour === 12) {
      // && meridiem == 'am'
      date.setHours(0);
    } else {
      date.setHours(parsedHour);
    }

    date.setMinutes(minute);

    return date;
  },
  newScheduledDate: function newScheduledDate() {
    var date = new Date();

    date.setHours(date.getHours() + 1);
    date.setMinutes(0);

    return date;
  },


  // Validation Helpers
  isFutureDate: function isFutureDate(date) {
    return date > new Date();
  },
  isPastDate: function isPastDate(date) {
    return !this.isFutureDate(date);
  },
  isADate: function isADate(date) {
    return !this.isNotADate(date);
  },
  isNotADate: function isNotADate(date) {
    if (!date) {
      return true;
    }
    if ((typeof date === 'undefined' ? 'undefined' : (0, _typeof3.default)(date)) !== 'object') {
      return true;
    }
    return isNaN(date.getUTCDate());
  }
};