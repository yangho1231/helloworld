'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Analytics = function () {
  function Analytics() {
    (0, _classCallCheck3.default)(this, Analytics);

    this.options = {};
  }

  (0, _createClass3.default)(Analytics, [{
    key: 'configure',
    value: function configure(o) {
      this.options = (0, _extends3.default)(this.options, o || {});
    }
  }, {
    key: 'sendToGoogle',
    value: function sendToGoogle() {
      if (window.ga) {
        var _window;

        (_window = window).ga.apply(_window, arguments);
      } else {
        console.warn('Google analytics not configured.');
      }
    }
  }, {
    key: 'trackPageView',
    value: function trackPageView(path, pageTitle) {
      this.sendToGoogle('send', {
        hitType: 'pageview',
        page: '/' + (this.options.productName || 'no-product') + '/' + path,
        title: pageTitle || path
      });
    }
  }, {
    key: 'trackEvent',
    value: function trackEvent(eventAction, eventLabel, eventValue) {
      this.sendToGoogle('send', {
        hitType: 'event',
        eventCategory: this.options.productName,
        eventAction: eventAction,
        eventLabel: eventLabel,
        eventValue: eventValue
      });
    }
  }]);
  return Analytics;
}();

exports.default = new Analytics();