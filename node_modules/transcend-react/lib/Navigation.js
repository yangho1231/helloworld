'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Navigation = function () {
  function Navigation(o) {
    (0, _classCallCheck3.default)(this, Navigation);

    this.options = (0, _extends3.default)({}, this.getDefaults(), o || {});
  }

  (0, _createClass3.default)(Navigation, [{
    key: 'getDefaults',
    value: function getDefaults() {
      return {};
    }
  }, {
    key: 'configure',
    value: function configure(options) {
      this.options = (0, _extends3.default)(this.options, options || {});
    }
  }, {
    key: 'buildPath',
    value: function buildPath(aRelativePath, data) {
      var relativePath = aRelativePath;
      if (relativePath.indexOf('://') === -1) {
        relativePath = this.normalizePath(relativePath);

        if (relativePath.indexOf(this.getSitePath()) !== 0) {
          return '' + this.getSitePath() + (relativePath || '');
        }
      }
      return this.buildDataTag(relativePath, data);
    }
  }, {
    key: 'buildProductPath',
    value: function buildProductPath(aProductName, relativePath, data) {
      var productName = aProductName.toUpperCase();
      var productUrl = this.options[productName + '_URL'];
      var productPath = this.options[productName + '_PRODUCT_NAME'];
      if (productUrl.indexOf(productPath) !== productUrl.length - productPath.length) {
        productUrl = '' + productUrl + productPath;
      }
      var normalizedRelativePath = this.normalizePath(relativePath);
      return this.buildDataTag('' + productUrl + normalizedRelativePath, data);
    }
  }, {
    key: 'buildDataTag',
    value: function buildDataTag(path, data) {
      if (data && _lodash2.default.isObject(data)) {
        return path + '#' + (0, _stringify2.default)(data);
      }
      return path;
    }
  }, {
    key: 'getSitePath',
    value: function getSitePath() {
      return this.normalizePath(this.options.sitePath);
    }
  }, {
    key: 'normalizePath',
    value: function normalizePath() {
      var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

      var normalizedPath = path;
      if (path.substr(0, 1) !== '/') {
        normalizedPath = '/' + normalizedPath;
      }
      if (normalizedPath.substr(normalizedPath.lastIndexOf('/')) === '/') {
        normalizedPath = normalizedPath.substring(0, normalizedPath.lastIndexOf('/'));
      }
      return normalizedPath;
    }
  }, {
    key: 'navigate',
    value: function navigate(aRelativeUrl, data) {
      var relativeUrl = aRelativeUrl;
      if (this.options.history && !relativeUrl.match(/^https?:\/\//i)) {
        var sitePath = this.options.sitePath;
        if (sitePath && relativeUrl.substr(0, sitePath.length) === sitePath) {
          relativeUrl = relativeUrl.substr(sitePath.length);
        }
        if (relativeUrl.substr(0, 1) === '/') {
          relativeUrl = relativeUrl.substr(1);
        }
        this.options.history.push({
          pathname: relativeUrl,
          state: data
        });
      } else {
        window.location.href = this.buildPath(relativeUrl, data);
      }
    }
  }]);
  return Navigation;
}();

exports.default = new Navigation();