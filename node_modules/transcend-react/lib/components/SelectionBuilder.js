'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _SelectionBuilderWord = require('./SelectionBuilderWord');

var _SelectionBuilderWord2 = _interopRequireDefault(_SelectionBuilderWord);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SelectionBuilder = function (_React$Component) {
  (0, _inherits3.default)(SelectionBuilder, _React$Component);

  function SelectionBuilder(props, context) {
    (0, _classCallCheck3.default)(this, SelectionBuilder);

    var _this = (0, _possibleConstructorReturn3.default)(this, (SelectionBuilder.__proto__ || (0, _getPrototypeOf2.default)(SelectionBuilder)).call(this, props, context));

    _this.onAddClick = _this.onAddClick.bind(_this);
    _this.onKeyDown = _this.onKeyDown.bind(_this);
    _this.onChange = _this.onChange.bind(_this);
    _this.onRemoveWord = _this.onRemoveWord.bind(_this);

    _this.state = {
      words: props.words,
      value: ''
    };
    return _this;
  }

  (0, _createClass3.default)(SelectionBuilder, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.setState({
        words: nextProps.words
      });
    }
  }, {
    key: 'onAddClick',
    value: function onAddClick() {
      this.addWord(this.state.value);
    }
  }, {
    key: 'onRemoveWord',
    value: function onRemoveWord(word) {
      var words = this.state.words;
      words.splice(words.indexOf(word), 1);

      this.setState({
        words: words
      });
      if (this.props.onChange) {
        this.props.onChange(words);
      }
    }
  }, {
    key: 'onKeyDown',
    value: function onKeyDown(e) {
      if (e.keyCode === 13 || e.keyCode === 188) {
        // enter or comma
        this.onAddClick();
        e.preventDefault();
        e.stopPropagation();
      }
    }
  }, {
    key: 'onChange',
    value: function onChange(evt) {
      this.setState({
        value: evt.target.value
      });
    }

    // This method is called by the parent component when it needs the finished list of words

  }, {
    key: 'getValues',
    value: function getValues() {
      return this.state.words;
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        { className: 'selection-builder' },
        this.renderList(),
        _react2.default.createElement(
          'div',
          { className: 'selection-builder__add-word flex' },
          _react2.default.createElement(
            'div',
            { className: 'grow' },
            _react2.default.createElement('input', {
              type: 'text',
              onKeyDown: this.onKeyDown,
              onChange: this.onChange,
              placeholder: this.props.placeholder,
              value: this.state.value,
              autoComplete: 'off'
            })
          ),
          _react2.default.createElement(
            'div',
            { className: 'shrink' },
            _react2.default.createElement(
              'button',
              { className: 'button button--small', onClick: this.onAddClick },
              'Add'
            )
          )
        )
      );
    }
  }, {
    key: 'renderList',
    value: function renderList() {
      var _this2 = this;

      if (this.state.words && this.state.words.length) {
        var words = this.state.words.map(function (w) {
          return _react2.default.createElement(_SelectionBuilderWord2.default, { key: w, word: w, onRemoveWord: _this2.onRemoveWord });
        });
        return _react2.default.createElement(
          'div',
          { className: 'selection-builder__list' },
          words
        );
      }
      return undefined;
    }
  }, {
    key: 'addWord',
    value: function addWord() {
      var _this3 = this;

      for (var _len = arguments.length, words = Array(_len), _key = 0; _key < _len; _key++) {
        words[_key] = arguments[_key];
      }

      var cleanedWords = words.map(function (word) {
        return word.replace(/,$/, '').trim();
      });

      cleanedWords = _lodash2.default.chain(cleanedWords).flatten().uniq().filter(function (word) {
        return word && _this3.state.words.indexOf(word.toLowerCase()) === -1;
      }).value();

      if (!cleanedWords.length) {
        return;
      }
      this.setState({
        words: [].concat((0, _toConsumableArray3.default)(this.state.words), (0, _toConsumableArray3.default)(cleanedWords)),
        value: ''
      }, function () {
        if (_this3.props.onChange) {
          _this3.props.onChange(_this3.state.words);
        }
      });
    }
  }]);
  return SelectionBuilder;
}(_react2.default.Component);

SelectionBuilder.propTypes = {
  words: _react2.default.PropTypes.arrayOf(_react2.default.PropTypes.string),
  placeholder: _react2.default.PropTypes.string,
  onChange: _react2.default.PropTypes.func
};
SelectionBuilder.defaultProps = {
  words: []
};
exports.default = SelectionBuilder;