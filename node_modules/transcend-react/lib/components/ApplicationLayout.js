'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _NavLink = require('./NavLink');

var _NavLink2 = _interopRequireDefault(_NavLink);

var _ApplicationSideBar = require('./ApplicationSideBar');

var _ApplicationSideBar2 = _interopRequireDefault(_ApplicationSideBar);

var _monitors = require('../images/monitors.svg');

var _monitors2 = _interopRequireDefault(_monitors);

var _audiences = require('../images/audiences.svg');

var _audiences2 = _interopRequireDefault(_audiences);

var _channels = require('../images/channels.svg');

var _channels2 = _interopRequireDefault(_channels);

var _publishing = require('../images/publishing.svg');

var _publishing2 = _interopRequireDefault(_publishing);

var _reports = require('../images/reports.svg');

var _reports2 = _interopRequireDefault(_reports);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ApplicationLayout = function (_Component) {
  (0, _inherits3.default)(ApplicationLayout, _Component);

  function ApplicationLayout() {
    var _ref;

    (0, _classCallCheck3.default)(this, ApplicationLayout);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = (0, _possibleConstructorReturn3.default)(this, (_ref = ApplicationLayout.__proto__ || (0, _getPrototypeOf2.default)(ApplicationLayout)).call.apply(_ref, [this].concat(args)));

    _this.state = {};
    _this.onSideBarResize = _this.onSideBarResize.bind(_this);
    return _this;
  }
  /* eslint-disable react/sort-comp */


  (0, _createClass3.default)(ApplicationLayout, [{
    key: 'onSideBarResize',
    value: function onSideBarResize() {
      this.setState({
        collapsed: !this.state.collapsed
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var companySlug = this.props.currentCompany ? this.props.currentCompany.slug : '';
      var className = ['application-layout'];
      if (this.props.className) {
        className.push(this.props.className);
      }
      if (this.state.collapsed) {
        className.push('application-layout--collapsed');
      }
      return _react2.default.createElement(
        'div',
        { className: className.join(' ') },
        _react2.default.createElement(
          _ApplicationSideBar2.default,
          {
            csrfToken: this.props.csrfToken,
            collapsed: this.state.collapsed,
            companies: this.props.companies,
            currentCompany: this.props.currentCompany,
            currentPosition: this.props.currentPosition,
            location: this.props.location,
            onResize: this.onSideBarResize,
            params: this.props.params,
            user: this.props.currentUser
          },
          _react2.default.createElement(
            _NavLink2.default,
            { absolute: true, to: '/monitors/' + companySlug, match: /^\/monitors/, location: this.props.location, matchedClassName: 'selected' },
            _react2.default.createElement(_monitors2.default, { className: 'navigation-icon' }),
            _react2.default.createElement(
              'span',
              null,
              'Monitors'
            )
          ),
          _react2.default.createElement(
            _NavLink2.default,
            { absolute: true, to: '/channels/' + companySlug, match: /^\/channels/, location: this.props.location, matchedClassName: 'selected' },
            _react2.default.createElement(_channels2.default, { className: 'navigation-icon' }),
            _react2.default.createElement(
              'span',
              null,
              'Channels'
            )
          ),
          _react2.default.createElement(
            _NavLink2.default,
            { absolute: true, to: '/publishing/' + companySlug, match: /^\/publishing/, location: this.props.location, matchedClassName: 'selected' },
            _react2.default.createElement(_publishing2.default, { className: 'navigation-icon' }),
            _react2.default.createElement(
              'span',
              null,
              'Publishing'
            )
          ),
          this.renderAudiencesLink(companySlug),
          _react2.default.createElement(
            _NavLink2.default,
            { absolute: true, to: '/reporting/' + companySlug, match: /^\/reporting/, location: this.props.location, matchedClassName: 'selected' },
            _react2.default.createElement(_reports2.default, { className: 'navigation-icon' }),
            _react2.default.createElement(
              'span',
              null,
              'Reports'
            )
          ),
          this.renderGlobalAdminLink()
        ),
        _react2.default.createElement(
          'section',
          { className: 'application-layout__content' },
          this.props.children
        )
      );
    }
  }, {
    key: 'renderAudiencesLink',
    value: function renderAudiencesLink(companySlug) {
      if (this.props.currentCompany && (!this.isWhiteLabel() || this.hasAudiencesAccess())) {
        return _react2.default.createElement(
          _NavLink2.default,
          { absolute: true, to: '/audiences/' + companySlug, match: /^\/audiences/, location: this.props.location, matchedClassName: 'selected' },
          _react2.default.createElement(_audiences2.default, { className: 'navigation-icon' }),
          _react2.default.createElement(
            'span',
            null,
            'Audiences'
          )
        );
      }
      return undefined;
    }
  }, {
    key: 'renderGlobalAdminLink',
    value: function renderGlobalAdminLink() {
      if (this.props.currentPosition && this.props.currentPosition.is_super_admin) {
        return _react2.default.createElement(
          _NavLink2.default,
          { absolute: true, to: '/settings/admin', match: /^\/settings\/admin/, location: this.props.location, matchedClassName: 'selected' },
          _react2.default.createElement(_reports2.default, { className: 'navigation-icon' }),
          _react2.default.createElement(
            'span',
            null,
            'Nuvi Admin'
          )
        );
      }
      return undefined;
    }
  }, {
    key: 'canManageSocialProfiles',
    value: function canManageSocialProfiles() {
      return this.props.currentPosition.can_manage_social_profiles || this.canManageAgency();
    }
  }, {
    key: 'canManageUsers',
    value: function canManageUsers() {
      return this.props.currentPosition.can_manage_users || this.canManageAgency();
    }
  }, {
    key: 'canManageAgency',
    value: function canManageAgency() {
      return this.props.currentPosition.can_manage_agency;
    }
  }, {
    key: 'isWhiteLabel',
    value: function isWhiteLabel() {
      return this.props.currentCompany && this.props.currentCompany.is_white_label;
    }
  }, {
    key: 'hasAudiencesAccess',
    value: function hasAudiencesAccess() {
      return this.props.currentCompany && this.props.currentCompany.has_audiences_access;
    }
  }]);
  return ApplicationLayout;
}(_react.Component);

ApplicationLayout.adminPath = /(\/admin\/(companies|agencies|\W).*)|(\/admin\/?$)/;
ApplicationLayout.settingsPath = /\/personal_settings\/.*/;
ApplicationLayout.propTypes = {
  children: _react.PropTypes.node.isRequired,
  className: _react.PropTypes.string,
  companies: _react.PropTypes.array,
  currentCompany: _react.PropTypes.object,
  currentPosition: _react.PropTypes.object.isRequired,
  currentUser: _react.PropTypes.object.isRequired,
  csrfToken: _react.PropTypes.string,
  location: _react.PropTypes.object.isRequired,
  logoutUrl: _react.PropTypes.string,
  params: _react.PropTypes.object.isRequired,
  selectedProduct: _react.PropTypes.string
};
exports.default = ApplicationLayout;