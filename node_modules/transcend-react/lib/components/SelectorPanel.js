'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _numeral = require('numeral');

var _numeral2 = _interopRequireDefault(_numeral);

var _SelectorPanelItem = require('./SelectorPanelItem');

var _SelectorPanelItem2 = _interopRequireDefault(_SelectorPanelItem);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SelectorPanel = function (_React$Component) {
  (0, _inherits3.default)(SelectorPanel, _React$Component);

  function SelectorPanel() {
    var _ref;

    (0, _classCallCheck3.default)(this, SelectorPanel);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = (0, _possibleConstructorReturn3.default)(this, (_ref = SelectorPanel.__proto__ || (0, _getPrototypeOf2.default)(SelectorPanel)).call.apply(_ref, [this].concat(args)));

    _this.onMouseDown = function () {
      _this.setState({
        highlightedIndex: -1
      });
    };

    _this.onMouseMove = function () {
      if (_this.hideTimeout) {
        window.clearTimeout(_this.hideTimeout);
        delete _this.hideTimeout;
      }
    };

    _this.onMouseLeave = function () {
      _this.hideTimeout = window.setTimeout(function () {
        _this.hide();
      }, 1000);
    };

    _this.onSearchKeyDown = function (evt) {
      var collection = _this.filterCollection();
      if (evt.keyCode === 8 && !_this.searchHasFocus()) {
        evt.preventDefault();
      } else if (evt.keyCode === 40) {
        // down
        evt.preventDefault();
        var highlightedIndex = _this.state.highlightedIndex + 1;
        if (highlightedIndex >= collection.length) {
          highlightedIndex = 0;
        }
        _this.setState({
          highlightedIndex: highlightedIndex
        });
      } else if (evt.keyCode === 38) {
        // up
        evt.preventDefault();
        var _highlightedIndex = _this.state.highlightedIndex - 1;
        if (_highlightedIndex < -1) {
          _highlightedIndex = collection.length - 1;
        }
        _this.setState({
          highlightedIndex: _highlightedIndex
        });
      } else if (evt.keyCode === 27) {
        // escape
        _this.hide();
      } else if (evt.keyCode === 13) {
        // enter
        if (_this.state.highlightedIndex > -1) {
          _this.onSelect(collection[_this.state.highlightedIndex]);
        }
      }
    };

    _this.onSearchKeyUp = function (evt) {
      var filterText = evt.target.value;
      if (filterText !== _this.state.filterText) {
        _this.setState({
          filterText: filterText,
          highlightedIndex: -1
        });
      }
    };

    _this.onScrimClick = function () {
      _this.hide();
    };

    _this.onSelect = function (item) {
      _this.props.onSelect(item);
    };

    _this.onOptions = function (item) {
      _this.props.onOptions(item);
    };

    _this.state = {};
    return _this;
  }

  (0, _createClass3.default)(SelectorPanel, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.search && !this.searchHasFocus()) {
        this.search.focus();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var className = ['selector-panel', this.props.className];
      if (this.shouldShowSearch()) {
        className.push('selector-panel--with-search');
      }
      /* eslint-disable  jsx-a11y/no-static-element-interactions */
      return _react2.default.createElement(
        'div',
        { className: className.join(' ') },
        this.renderScrim(),
        _react2.default.createElement(
          'div',
          {
            className: 'selector-panel__container',
            onMouseLeave: this.onMouseLeave,
            onMouseMove: this.onMouseMove
          },
          _react2.default.createElement(
            'div',
            { className: 'selector-panel__head' },
            _react2.default.createElement(
              'div',
              { className: 'selector-panel__title' },
              this.props.title
            ),
            this.renderSearch()
          ),
          this.renderList(),
          this.props.children
        )
      );
    }
  }, {
    key: 'renderScrim',
    value: function renderScrim() {
      if (this.props.showScrim) {
        return _react2.default.createElement('div', { className: 'selector-panel__scrim scrim', onClick: this.onScrimClick });
      }
      return undefined;
    }
  }, {
    key: 'renderAdditionalMessage',
    value: function renderAdditionalMessage(filteredItems) {
      if (this.props.collection.length > this.props.maxItems && filteredItems.length > this.props.maxItems) {
        var lengthForMessage = this.props.collection.length;
        if (this.state.filterText) {
          lengthForMessage = filteredItems.length;
        }
        return _react2.default.createElement(
          'li',
          { className: 'selector-panel__list__message-element' },
          _react2.default.createElement(
            'div',
            { className: 'selector-panel__list__additional-message' },
            (0, _numeral2.default)(lengthForMessage - this.props.maxItems).format('0,0') + ' not displayed',
            _react2.default.createElement(
              'div',
              null,
              'Refine search to view more'
            )
          )
        );
      }
      return undefined;
    }
  }, {
    key: 'renderSearch',
    value: function renderSearch() {
      var _this2 = this;

      if (this.shouldShowSearch()) {
        return _react2.default.createElement(
          'div',
          { className: 'selector-panel__search' },
          _react2.default.createElement('input', {
            placeholder: 'Type To Search',
            onKeyUp: this.onSearchKeyUp,
            onKeyDown: this.onSearchKeyDown,
            type: 'search',
            ref: function ref(n) {
              return _this2.search = n;
            }
          })
        );
      }
      return undefined;
    }
  }, {
    key: 'renderList',
    value: function renderList() {
      var _this3 = this;

      var items = this.filterCollection();

      if (items.length > 0) {
        var displayedItems = items.slice(0, this.props.maxItems);
        var elements = displayedItems.map(function (item, i) {
          var className = ['selector-panel__item'];
          if (i === _this3.state.highlightedIndex) {
            className.push('selector-panel__item--highlighted');
          }
          if (_this3.props.current && item[_this3.props.idAttribute] === _this3.props.current[_this3.props.idAttribute]) {
            className.push('selector-panel__item--current');
          }
          var Component = _this3.props.itemComponent ? _this3.props.itemComponent : _SelectorPanelItem2.default;
          return _react2.default.createElement(Component, {
            key: item[_this3.props.idAttribute],
            className: className.join(' '),
            nameAttribute: _this3.props.nameAttribute,
            onSelect: _this3.onSelect,
            onOptions: _this3.onOptions,
            item: item
          });
        });

        return _react2.default.createElement(
          'ul',
          { className: 'selector-panel__list' },
          elements,
          this.renderAdditionalMessage(items)
        );
      } else if (this.state.filterText) {
        return _react2.default.createElement(
          'ul',
          { className: 'selector-panel__list' },
          _react2.default.createElement(
            'div',
            { className: 'selector-panel__list__zero-state' },
            'No matches for "' + this.state.filterText + '"'
          )
        );
      } else {
        return _react2.default.createElement(
          'ul',
          { className: 'selector-panel__list' },
          _react2.default.createElement(
            'div',
            { className: 'selector-panel__list__zero-state' },
            this.props.zeroStateText
          )
        );
      }
    }
  }, {
    key: 'filterCollection',
    value: function filterCollection() {
      var _this4 = this;

      var filterText = (this.state.filterText || '').toLowerCase();
      var chain = _lodash2.default.chain(this.props.collection || []);
      if (filterText) {
        chain = chain.filter(function (item) {
          return (item[_this4.props.nameAttribute] || '').toLowerCase().indexOf(filterText) !== -1;
        });
      }
      return chain.sortBy(this.props.nameAttribute).value();
    }
  }, {
    key: 'searchHasFocus',
    value: function searchHasFocus() {
      return this.search && this.search.matches(':focus');
    }
  }, {
    key: 'shouldShowSearch',
    value: function shouldShowSearch() {
      return this.props.collection.length >= this.props.maxItems;
    }
  }, {
    key: 'hide',
    value: function hide() {
      if (this.props.onHide) {
        this.props.onHide();
      }
    }
  }]);
  return SelectorPanel;
}(_react2.default.Component);

SelectorPanel.propTypes = {
  children: _react2.default.PropTypes.node,
  className: _react2.default.PropTypes.string,
  collection: _react2.default.PropTypes.array.isRequired,
  current: _react2.default.PropTypes.object,
  idAttribute: _react2.default.PropTypes.string,
  itemComponent: _react2.default.PropTypes.any,
  maxItems: _react2.default.PropTypes.number,
  nameAttribute: _react2.default.PropTypes.string,
  onHide: _react2.default.PropTypes.func,
  onSelect: _react2.default.PropTypes.func.isRequired,
  onOptions: _react2.default.PropTypes.func,
  title: _react2.default.PropTypes.string,
  showScrim: _react2.default.PropTypes.bool,
  zeroStateText: _react2.default.PropTypes.string
};
SelectorPanel.defaultProps = {
  title: 'title',
  idAttribute: 'guid',
  nameAttribute: 'name',
  maxItems: 1e4,
  showScrim: true,
  zeroStateText: 'No items to show.'
};
exports.default = SelectorPanel;