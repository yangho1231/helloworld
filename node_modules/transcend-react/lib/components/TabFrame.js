'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TabFrame = function (_React$Component) {
  (0, _inherits3.default)(TabFrame, _React$Component);

  function TabFrame(props) {
    var _ref;

    (0, _classCallCheck3.default)(this, TabFrame);

    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var _this = (0, _possibleConstructorReturn3.default)(this, (_ref = TabFrame.__proto__ || (0, _getPrototypeOf2.default)(TabFrame)).call.apply(_ref, [this, props].concat(args)));

    _this.uniqueId = _lodash2.default.uniqueId('tabs');
    _this.state = {
      selectedKey: props.selectedKey || _this.children()[0].key
    };
    _this.onTabClick = _this.onTabClick.bind(_this);
    _this.onTabChange = _this.onTabChange.bind(_this);
    return _this;
  }

  (0, _createClass3.default)(TabFrame, [{
    key: 'onTabClick',
    value: function onTabClick(evt) {
      evt.preventDefault();
      var id = evt.target.id;
      if (id && id.substr(0, this.uniqueId.length + 1) === this.uniqueId + '-') {
        this.changeTabToKey(id.substr(this.uniqueId.length + 1));
      }
    }
  }, {
    key: 'onTabChange',
    value: function onTabChange() {
      if (this.node && this.node.scrollIntoView) {
        this.node.scrollIntoView(true);
      }
      if (this.props.onChange) {
        this.props.onChange(this.state.selectedKey);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      return _react2.default.createElement(
        'div',
        { className: 'tab-frame nav-tabs' },
        _react2.default.createElement(
          'ul',
          { className: 'tab-frame__tabs nav-tabs__list', ref: function ref(n) {
              return _this2.node = n;
            } },
          this.renderTabs()
        ),
        this.renderSelectedView()
      );
    }
  }, {
    key: 'renderTabs',
    value: function renderTabs() {
      var _this3 = this;

      return this.children().map(function (tabNode) {
        var className = ['tab-frame__tab', 'nav-tabs__tab'];
        if (tabNode.props.className) {
          className.push(tabNode.props.className);
        }
        if (tabNode.key === _this3.state.selectedKey) {
          className.push('tab-frame__tab--selected');
          className.push('nav-tabs__tab--selected');
        }
        var id = _this3.uniqueId + '-' + tabNode.key;
        return _react2.default.createElement(
          'li',
          { className: className.join(' '), key: tabNode.key },
          _react2.default.createElement(
            'a',
            { onClick: _this3.onTabClick, id: id, tabIndex: '0' },
            tabNode.props.title
          )
        );
      });
    }
  }, {
    key: 'renderSelectedView',
    value: function renderSelectedView() {
      var _this4 = this;

      return this.children().find(function (tabNode) {
        return tabNode.key === _this4.state.selectedKey;
      });
    }
  }, {
    key: 'changeTabToKey',
    value: function changeTabToKey(selectedKey) {
      if (selectedKey === this.state.selectedKey) {
        return;
      }
      if (this.props.onBeforeChange) {
        var shouldContinue = this.props.onBeforeChange(this.state.selectedKey);
        if (shouldContinue === false) {
          return;
        }
      }
      this.setState({
        selectedKey: selectedKey
      }, this.onTabChange);
    }
  }, {
    key: 'children',
    value: function children() {
      var children = this.props.children;
      if (!_lodash2.default.isArray(children)) {
        children = [children];
      }
      // we dont use React.Children.map/toArray because it runs bookkeeping on the keys, :(
      return _lodash2.default.filter(children);
    }
  }]);
  return TabFrame;
}(_react2.default.Component);

TabFrame.propTypes = {
  onChange: _react2.default.PropTypes.func,
  onBeforeChange: _react2.default.PropTypes.func,
  children: _react2.default.PropTypes.node.isRequired,
  selectedKey: _react2.default.PropTypes.string
};
exports.default = TabFrame;