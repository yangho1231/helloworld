'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _CompanySelectorPanelItem = require('./CompanySelectorPanelItem');

var _CompanySelectorPanelItem2 = _interopRequireDefault(_CompanySelectorPanelItem);

var _SelectorPanel = require('./SelectorPanel');

var _SelectorPanel2 = _interopRequireDefault(_SelectorPanel);

var _WaitIndicator = require('./WaitIndicator');

var _WaitIndicator2 = _interopRequireDefault(_WaitIndicator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MAX_COMPANIES_RENDER = 5;

var CompanySelectorPanel = function (_React$Component) {
  (0, _inherits3.default)(CompanySelectorPanel, _React$Component);

  function CompanySelectorPanel() {
    var _ref;

    (0, _classCallCheck3.default)(this, CompanySelectorPanel);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = (0, _possibleConstructorReturn3.default)(this, (_ref = CompanySelectorPanel.__proto__ || (0, _getPrototypeOf2.default)(CompanySelectorPanel)).call.apply(_ref, [this].concat(args)));

    _this.onCompanySelect = function (company) {
      _this.setState({
        highlightedIndex: -1
      }, function () {
        _this.setCompany(company);
      });
    };

    _this.onCompanySettings = function (company) {
      window.location = '/settings/' + company.slug + '/company_settings/';
    };

    _this.state = {};
    return _this;
  }

  (0, _createClass3.default)(CompanySelectorPanel, [{
    key: 'setCompany',
    value: function setCompany(company) {
      var currentCompany = this.props.currentCompany || {};
      if (company.guid !== currentCompany.guid) {
        var url = this.props.location.basename || '';
        if (currentCompany.slug && _lodash2.default.endsWith(url, '/' + currentCompany.slug)) {
          url = url.substr(0, url.length - (currentCompany.slug.length + 1));
          url = url + '/' + company.slug;
        }
        if (_lodash2.default.keys(this.props.params).length === 0) {
          // no params, so not dynamic
          var pathname = this.props.location.pathname || '';
          if (pathname.substr(0, 1) === '/') {
            pathname = pathname.substr(1);
          }
          if (currentCompany.slug && pathname.substr(0, currentCompany.slug.length + 1) === currentCompany.slug + '/') {
            pathname = pathname.substr(currentCompany.slug.length + 1);
            pathname = company.slug + '/' + pathname;
          } else if (currentCompany.slug && pathname === currentCompany.slug) {
            pathname = company.slug;
          }
          if (pathname.length && pathname !== '/') {
            url = url + '/' + pathname;
          }
        }
        this.setState({
          switchingCompany: company
        }, function () {
          window.location.href = url;
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        { className: 'company-selector-panel' },
        _react2.default.createElement(
          _SelectorPanel2.default,
          (0, _extends3.default)({}, this.props, {
            collection: this.props.companies,
            current: this.props.currentCompany,
            onSelect: this.onCompanySelect,
            onOptions: this.onCompanySettings,
            title: 'Your Companies',
            maxItems: MAX_COMPANIES_RENDER,
            itemComponent: _CompanySelectorPanelItem2.default
          }),
          this.renderCreateCompany()
        ),
        this.renderLoading()
      );
    }
  }, {
    key: 'renderCreateCompany',
    value: function renderCreateCompany() {
      if (this.props.showCreateCompany) {
        return _react2.default.createElement(
          'a',
          { className: 'selector-panel__create' },
          _react2.default.createElement(
            'div',
            { className: 'selector-panel__create__container' },
            _react2.default.createElement('i', { className: 'icon icon--plus' }),
            ' Create Company'
          )
        );
      }
      return undefined;
    }
  }, {
    key: 'renderLoading',
    value: function renderLoading() {
      if (this.state.switchingCompany) {
        return _react2.default.createElement(
          'div',
          { className: 'company-selector-panel__loading' },
          _react2.default.createElement(
            'div',
            { className: 'company-selector-panel__loading__content' },
            _react2.default.createElement(_WaitIndicator2.default, null),
            _react2.default.createElement(
              'div',
              { className: 'company-selector-panel__loading__content__message' },
              'Switching to',
              _react2.default.createElement('br', null),
              _react2.default.createElement(
                'strong',
                { className: 'company-selector-panel__loading__content__message_name' },
                this.state.switchingCompany.name
              )
            )
          )
        );
      }
      return undefined;
    }
  }]);
  return CompanySelectorPanel;
}(_react2.default.Component);

CompanySelectorPanel.propTypes = {
  currentCompany: _react2.default.PropTypes.object,
  companies: _react2.default.PropTypes.array.isRequired,
  className: _react2.default.PropTypes.string,
  location: _react2.default.PropTypes.object.isRequired,
  params: _react2.default.PropTypes.object.isRequired,
  onHide: _react2.default.PropTypes.func,
  showCreateCompany: _react2.default.PropTypes.bool
};
exports.default = CompanySelectorPanel;