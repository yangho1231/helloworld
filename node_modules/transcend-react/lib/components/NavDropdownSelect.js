'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _NavDropdownSelectOption = require('./NavDropdownSelectOption');

var _NavDropdownSelectOption2 = _interopRequireDefault(_NavDropdownSelectOption);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var NavDropdownSelect = function (_React$Component) {
  (0, _inherits3.default)(NavDropdownSelect, _React$Component);

  function NavDropdownSelect() {
    var _ref;

    (0, _classCallCheck3.default)(this, NavDropdownSelect);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = (0, _possibleConstructorReturn3.default)(this, (_ref = NavDropdownSelect.__proto__ || (0, _getPrototypeOf2.default)(NavDropdownSelect)).call.apply(_ref, [this].concat(args)));

    var _this$getDefaultSelec = _this.getDefaultSelection(_this.props),
        defaultValue = _this$getDefaultSelec.defaultValue,
        defaultText = _this$getDefaultSelec.defaultText;

    _this.onOptionClick = _this.onOptionClick.bind(_this);
    _this.onIconClick = _this.onIconClick.bind(_this);
    _this.onNewButtonClick = _this.onNewButtonClick.bind(_this);
    _this.onSearchKeyUp = _this.onSearchKeyUp.bind(_this);
    _this.onDropDownClick = _this.onDropDownClick.bind(_this);
    _this.onMouseLeave = _this.onMouseLeave.bind(_this);
    _this.onMouseEnter = _this.onMouseEnter.bind(_this);
    _this.onMouseScroll = _this.onMouseScroll.bind(_this);
    _this.state = {
      selectedValue: defaultValue,
      selectedText: defaultText,
      showOptions: false,
      visibleOptions: _this.props.options.slice(0)
    };
    return _this;
  }

  (0, _createClass3.default)(NavDropdownSelect, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var _getDefaultSelection = this.getDefaultSelection(nextProps),
          defaultValue = _getDefaultSelection.defaultValue,
          defaultText = _getDefaultSelection.defaultText;

      this.setState({
        selectedValue: defaultValue,
        selectedText: defaultText,
        visibleOptions: nextProps.options.slice(0)
      });
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      if (this.state.showOptions) {
        if (this.searchText) {
          this.searchText.focus();
        }
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.mouseLeaveTimeout) {
        window.clearTimeout(this.mouseLeaveTimeout);
        delete this.mouseLeaveTimeout;
      }
    }
  }, {
    key: 'onDropDownClick',
    value: function onDropDownClick() {
      this.setState({
        showOptions: !this.state.showOptions
      });
    }
  }, {
    key: 'onIconClick',
    value: function onIconClick(selectedOption) {
      var callback = this.props.onIconClick || selectedOption.onIconClick;
      if (callback) {
        this.setState({
          showOptions: false
        }, function () {
          callback(selectedOption);
        });
      }
    }
  }, {
    key: 'onOptionClick',
    value: function onOptionClick(selectedOption) {
      if (selectedOption.callback) {
        selectedOption.callback(selectedOption[this.props.valueKey]);
      }
      this.setState({
        showOptions: false,
        selectedValue: selectedOption[this.props.valueKey],
        selectedText: selectedOption[this.props.textKey]
      });
      if (this.props.onSelect) {
        this.props.onSelect(selectedOption);
      }
    }
  }, {
    key: 'onMouseLeave',
    value: function onMouseLeave() {
      var _this2 = this;

      this.mouseLeaveTimeout = window.setTimeout(function () {
        _this2.setState({
          showOptions: false
        });
      }, 500);
    }
  }, {
    key: 'onMouseEnter',
    value: function onMouseEnter() {
      if (this.mouseLeaveTimeout) {
        window.clearTimeout(this.mouseLeaveTimeout);
        delete this.mouseLeaveTimeout;
      }
    }
  }, {
    key: 'onMouseScroll',
    value: function onMouseScroll(e) {
      var scrollableElement = this.options;
      if (scrollableElement.scrollTop === 0 && e.deltaY < 0) {
        e.preventDefault();
        e.stopPropagation();
      } else if (scrollableElement.scrollTop >= scrollableElement.scrollHeight - scrollableElement.clientHeight && e.deltaY > 0) {
        e.preventDefault();
        e.stopPropagation();
      }
    }
  }, {
    key: 'onSearchKeyUp',
    value: function onSearchKeyUp() {
      var _this3 = this;

      var prefix = this.searchText.value.toLowerCase();
      var visibleOptions = this.props.options.filter(function (option) {
        return option[_this3.props.textKey].toLowerCase().indexOf(prefix) !== -1;
      });

      this.setState({
        visibleOptions: visibleOptions
      });
    }
  }, {
    key: 'onNewButtonClick',
    value: function onNewButtonClick(evt) {
      var _this4 = this;

      evt.preventDefault();
      this.setState({
        showOptions: false
      }, function () {
        if (_this4.props.newButton.callback) {
          _this4.props.newButton.callback();
        }
      });
    }
  }, {
    key: 'getDefaultSelection',
    value: function getDefaultSelection(props) {
      var defaultValue = '';
      var defaultText = '';

      if (props.selectedText) {
        defaultValue = props.selectedValue;
        defaultText = props.selectedText;
      } else if (props.options.length) {
        defaultValue = props.options[0][this.props.valueKey];
        defaultText = props.options[0][this.props.textKey];
      }
      return { defaultValue: defaultValue, defaultText: defaultText };
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        { className: 'dropdown dropdown--nav', onMouseLeave: this.onMouseLeave, onMouseEnter: this.onMouseEnter },
        _react2.default.createElement(
          'div',
          { className: 'dropdown__container', onClick: this.onDropDownClick },
          this.renderLabel(),
          _react2.default.createElement(
            'div',
            { className: 'dropdown__selected-text' },
            this.state.selectedText
          ),
          _react2.default.createElement(
            'div',
            { className: 'dropdown__arrow' },
            _react2.default.createElement('span', { className: 'icon icon--sm icon--dropdown-arrow' })
          )
        ),
        this.renderOptionsList()
      );
    }
  }, {
    key: 'renderLabel',
    value: function renderLabel() {
      if (this.props.label) {
        return _react2.default.createElement(
          'div',
          { className: 'dropdown__label' },
          this.props.label
        );
      }
      return undefined;
    }
  }, {
    key: 'renderOptionsList',
    value: function renderOptionsList() {
      if (this.state.showOptions) {
        var className = ['dropdown__options'];
        if (this.props.alignRight) {
          className.push('dropdown__options--right');
        }
        return _react2.default.createElement(
          'div',
          { className: className.join(' ') },
          this.renderSearch(),
          this.renderOptions(),
          this.renderButton()
        );
      }
      return undefined;
    }
  }, {
    key: 'renderOptions',
    value: function renderOptions() {
      var _this5 = this;

      return this.state.visibleOptions.map(function (option, i) {
        return _react2.default.createElement(_NavDropdownSelectOption2.default, {
          textKey: _this5.props.textKey,
          option: option,
          key: i,
          onClick: _this5.onOptionClick,
          icon: _this5.props.icon,
          onIconClick: _this5.onIconClick
        });
      });
    }
  }, {
    key: 'renderSearch',
    value: function renderSearch() {
      var _this6 = this;

      if (this.props.isSearchable) {
        return _react2.default.createElement(
          'div',
          { className: 'dropdown__search' },
          _react2.default.createElement('input', {
            type: 'search',
            ref: function ref(n) {
              return _this6.searchText = n;
            },
            placeholder: this.props.searchPlaceholder,
            onKeyUp: this.onSearchKeyUp,
            autoFocus: true
          })
        );
      }
      return undefined;
    }
  }, {
    key: 'renderButton',
    value: function renderButton() {
      if (this.props.newButton) {
        return _react2.default.createElement(
          'div',
          { className: 'dropdown__options__button' },
          _react2.default.createElement(
            'button',
            { className: 'btn btn--sm btn--add full-width', onClick: this.onNewButtonClick },
            this.props.newButton.text,
            '\xA0',
            _react2.default.createElement('span', { className: 'icon icon--add' })
          )
        );
      }
      return undefined;
    }
  }]);
  return NavDropdownSelect;
}(_react2.default.Component);

NavDropdownSelect.propTypes = {
  label: _react2.default.PropTypes.string,
  options: _react2.default.PropTypes.array.isRequired,
  selectedText: _react2.default.PropTypes.string,
  selectedValue: _react2.default.PropTypes.any,
  isSearchable: _react2.default.PropTypes.bool,
  newButton: _react2.default.PropTypes.object,
  alignRight: _react2.default.PropTypes.bool,
  onSelect: _react2.default.PropTypes.func,
  onIconClick: _react2.default.PropTypes.func,
  valueKey: _react2.default.PropTypes.string,
  textKey: _react2.default.PropTypes.string,
  icon: _react2.default.PropTypes.string,
  searchPlaceholder: _react2.default.PropTypes.string
};
NavDropdownSelect.defaultProps = {
  searchPlaceholder: 'Search'
};
NavDropdownSelect.defaultProps = {
  valueKey: 'value',
  textKey: 'text',
  alignRight: false,
  isSearchable: false
};
exports.default = NavDropdownSelect;