'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactTestRenderer = require('react-test-renderer');

var _reactTestRenderer2 = _interopRequireDefault(_reactTestRenderer);

var _ApplicationSideBar = require('../ApplicationSideBar');

var _ApplicationSideBar2 = _interopRequireDefault(_ApplicationSideBar);

var _MockRouterContext = require('../../../__mocks__/MockRouterContext');

var _MockRouterContext2 = _interopRequireDefault(_MockRouterContext);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

jest.mock('react-dom');
describe('ApplicationSideBar.js', function () {
  it('should match base render', function () {
    var tree = _reactTestRenderer2.default.create(_react2.default.createElement(
      _MockRouterContext2.default,
      null,
      _react2.default.createElement(
        _ApplicationSideBar2.default,
        {
          location: {},
          params: {},
          currentUser: {},
          currentPosition: {},
          onResize: function onResize(n) {
            return n;
          }
        },
        _react2.default.createElement(
          'h1',
          null,
          'hi'
        )
      )
    )).toJSON();
    expect(tree).toMatchSnapshot();
  });

  it('should add expand class', function () {
    var tree = _reactTestRenderer2.default.create(_react2.default.createElement(
      _MockRouterContext2.default,
      null,
      _react2.default.createElement(
        _ApplicationSideBar2.default,
        {
          location: {},
          params: {},
          currentUser: {},
          currentPosition: {},
          onResize: function onResize(n) {
            return n;
          }
        },
        _react2.default.createElement(
          'h1',
          null,
          'hi'
        )
      )
    ));
    expect(tree.toJSON()).toMatchSnapshot();
  });

  it('should add collapsed class', function () {
    var tree = _reactTestRenderer2.default.create(_react2.default.createElement(
      _MockRouterContext2.default,
      null,
      _react2.default.createElement(
        _ApplicationSideBar2.default,
        {
          location: {},
          params: {},
          currentUser: {},
          currentPosition: {},
          onResize: function onResize(n) {
            return n;
          },
          collapsed: true
        },
        _react2.default.createElement(
          'h1',
          null,
          'hi'
        )
      )
    ));
    expect(tree.toJSON()).toMatchSnapshot();
  });

  it('should render the company', function () {
    var tree = _reactTestRenderer2.default.create(_react2.default.createElement(
      _MockRouterContext2.default,
      null,
      _react2.default.createElement(
        _ApplicationSideBar2.default,
        {
          location: {},
          params: {},
          currentUser: {},
          currentPosition: {},
          onResize: function onResize(n) {
            return n;
          },
          currentCompany: {
            name: 'mycompany',
            navbar_logo_url: '123',
            fav_icon_url: 'faviconurl'
          }
        },
        _react2.default.createElement(
          'h1',
          null,
          'hi'
        )
      )
    ));
    expect(tree.toJSON()).toMatchSnapshot();
  });

  it('should render the children', function () {
    var tree = _reactTestRenderer2.default.create(_react2.default.createElement(
      _MockRouterContext2.default,
      null,
      _react2.default.createElement(
        _ApplicationSideBar2.default,
        {
          location: {},
          params: {},
          currentUser: {},
          currentPosition: {},
          onResize: function onResize(n) {
            return n;
          }
        },
        _react2.default.createElement(
          'h1',
          null,
          'hi'
        ),
        _react2.default.createElement(
          'h1',
          null,
          'there'
        ),
        _react2.default.createElement(
          'h1',
          null,
          'my'
        ),
        _react2.default.createElement(
          'h1',
          null,
          'friend'
        )
      )
    ));
    expect(tree.toJSON()).toMatchSnapshot();
  });
});