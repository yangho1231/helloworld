'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactTestRenderer = require('react-test-renderer');

var _reactTestRenderer2 = _interopRequireDefault(_reactTestRenderer);

var _WaitFor = require('../WaitFor');

var _WaitFor2 = _interopRequireDefault(_WaitFor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

jest.mock('react-dom');
describe('WaitFor.js', function () {
  it('should match base render', function () {
    var tree = _reactTestRenderer2.default.create(_react2.default.createElement(
      _WaitFor2.default,
      { data: {} },
      _react2.default.createElement(
        'h1',
        null,
        'I am the content'
      )
    ));
    var json = tree.toJSON();
    expect(json).toMatchSnapshot();
  });

  it('should be showing a loader', function () {
    var tree = _reactTestRenderer2.default.create(_react2.default.createElement(
      _WaitFor2.default,
      { data: { isFetching: true } },
      _react2.default.createElement(
        'h1',
        null,
        'I am the content'
      )
    ));
    var json = tree.toJSON();
    expect(json).toMatchSnapshot();
    expect(json.children[0].props.className).toEqual('loader');
  });

  it('should be showing the content', function () {
    var tree = _reactTestRenderer2.default.create(_react2.default.createElement(
      _WaitFor2.default,
      { data: { isFetching: false, data: [] } },
      _react2.default.createElement(
        'h1',
        { className: 'thecontent' },
        'I am the content'
      )
    ));
    var json = tree.toJSON();
    expect(json).toMatchSnapshot();
    expect(json.props.className).toEqual('thecontent');
  });

  it('should render the error message when hasError is true', function () {
    var tree = _reactTestRenderer2.default.create(_react2.default.createElement(
      _WaitFor2.default,
      { data: { isFetching: false, data: [], hasError: true } },
      _react2.default.createElement(
        'h1',
        { className: 'thecontent' },
        'I am the content'
      )
    ));
    var json = tree.toJSON();
    expect(json).toMatchSnapshot();
    expect(json.props.className).toContain('error');
  });

  it('should wrap the content if you give it more than one node', function () {
    var tree = _reactTestRenderer2.default.create(_react2.default.createElement(
      _WaitFor2.default,
      { data: { isFetching: false, data: [] }, ignoreWarnings: true },
      _react2.default.createElement(
        'h1',
        { className: 'thecontent' },
        'I am the content'
      ),
      _react2.default.createElement(
        'h1',
        { className: 'othercontent' },
        'I am the content'
      )
    ));
    var json = tree.toJSON();
    expect(json).toMatchSnapshot();
    expect(json.props.className).toEqual('wait-for-wrapper');
  });
});