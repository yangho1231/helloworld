'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactTestRenderer = require('react-test-renderer');

var _reactTestRenderer2 = _interopRequireDefault(_reactTestRenderer);

var _NavLink = require('../NavLink');

var _NavLink2 = _interopRequireDefault(_NavLink);

var _MockRouterContext = require('../../../__mocks__/MockRouterContext');

var _MockRouterContext2 = _interopRequireDefault(_MockRouterContext);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

jest.mock('react-dom');
describe('NavLink.js', function () {
  it('should match base render', function () {
    var tree = _reactTestRenderer2.default.create(_react2.default.createElement(
      _MockRouterContext2.default,
      null,
      _react2.default.createElement(
        _NavLink2.default,
        { to: '/somewhere', location: {}, matchedClassName: 'imatched' },
        'Somewhere'
      )
    )).toJSON();
    expect(tree).toMatchSnapshot();
  });
  it('should add matched className on path match', function () {
    var tree = _reactTestRenderer2.default.create(_react2.default.createElement(
      _MockRouterContext2.default,
      null,
      _react2.default.createElement(
        _NavLink2.default,
        { to: '/somewhere', location: { pathname: '/somewhere' }, matchedClassName: 'imatched' },
        'Somewhere'
      )
    )).toJSON();
    expect(tree).toMatchSnapshot();
  });
  it('should add matched className on path match including basename', function () {
    var tree = _reactTestRenderer2.default.create(_react2.default.createElement(
      _MockRouterContext2.default,
      {
        router: {
          createLocation: function createLocation(pathname) {
            return {
              pathname: pathname,
              basename: '/fake-basename'
            };
          }
        }
      },
      _react2.default.createElement(
        _NavLink2.default,
        {
          to: '/fake-basename/somewhere',
          location: { pathname: '/somewhere' },
          matchedClassName: 'basename-match'
        },
        'Somewhere'
      )
    )).toJSON();
    expect(tree).toMatchSnapshot();
  });
});