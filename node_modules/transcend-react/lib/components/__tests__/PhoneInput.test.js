'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _enzyme = require('enzyme');

var _reactTestRenderer = require('react-test-renderer');

var _reactTestRenderer2 = _interopRequireDefault(_reactTestRenderer);

var _PhoneInput = require('../PhoneInput');

var _PhoneInput2 = _interopRequireDefault(_PhoneInput);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('PhoneInput.js', function () {
  var wrapper = void 0;

  it('should match base render', function () {
    var component = _reactTestRenderer2.default.create(_react2.default.createElement(_PhoneInput2.default, {
      onChange: jest.fn(),
      onBlur: jest.fn(),
      onFocus: jest.fn()
    }));
    var json = component.toJSON();
    expect(json).toMatchSnapshot();
  });

  it('should call onChange', function () {
    wrapper = (0, _enzyme.mount)(_react2.default.createElement(_PhoneInput2.default, {
      onChange: jest.fn(),
      onBlur: jest.fn(),
      onFocus: jest.fn()
    }));
    wrapper.find('input').simulate('change');
    expect(wrapper.prop('onChange')).toHaveBeenCalledTimes(1);
  });

  it('should call onBlur', function () {
    wrapper = (0, _enzyme.mount)(_react2.default.createElement(_PhoneInput2.default, {
      onChange: jest.fn(),
      onBlur: jest.fn(),
      onFocus: jest.fn()
    }));
    wrapper.find('input').simulate('blur');
    expect(wrapper.prop('onBlur')).toHaveBeenCalledTimes(1);
  });

  it('should call onFocus', function () {
    wrapper = (0, _enzyme.mount)(_react2.default.createElement(_PhoneInput2.default, {
      onChange: jest.fn(),
      onBlur: jest.fn(),
      onFocus: jest.fn()
    }));
    wrapper.find('input').simulate('focus');
    expect(wrapper.prop('onFocus')).toHaveBeenCalledTimes(1);
  });

  it('should update state onChange', function () {
    wrapper = (0, _enzyme.mount)(_react2.default.createElement(_PhoneInput2.default, {
      onChange: jest.fn(),
      onBlur: jest.fn(),
      onFocus: jest.fn()
    }));
    wrapper.find('input').simulate('change', { target: { value: '1-123-123-1223' } });
    expect(wrapper.state('phone')).toEqual('1-123-123-1223');
  });
});