'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _nuviDaterangePicker = require('nuvi-daterange-picker');

var _nuviDaterangePicker2 = _interopRequireDefault(_nuviDaterangePicker);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

require('moment-range');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DateRangePanel = function (_React$Component) {
  (0, _inherits3.default)(DateRangePanel, _React$Component);

  function DateRangePanel(props) {
    var _ref;

    (0, _classCallCheck3.default)(this, DateRangePanel);

    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var _this = (0, _possibleConstructorReturn3.default)(this, (_ref = DateRangePanel.__proto__ || (0, _getPrototypeOf2.default)(DateRangePanel)).call.apply(_ref, [this, props].concat(args)));

    _this.onStartInputChange = function (evt) {
      _this.setState({
        startText: evt.target.value
      });
    };

    _this.onEndInputChange = function (evt) {
      _this.setState({
        endText: evt.target.value
      });
    };

    _this.onStartInputBlur = function (evt) {
      var value = evt.target.value;
      var mom = (0, _moment2.default)(value);
      if (mom.isValid()) {
        var range = _moment2.default.range(mom.toDate(), _this.state.range.end);
        if (!_this.props.showTime) {
          range = _this.normalizeDateRange(range);
        }

        _this.setState({
          range: range,
          preset: null,
          endText: ''
        }, _this.notifyIfAllowed);
      } else {
        _this.setState({
          startText: 'Invalid Date'
        });
      }
    };

    _this.onEndInputBlur = function (evt) {
      var value = evt.target.value;
      var mom = (0, _moment2.default)(value);
      if (mom.isValid()) {
        var range = _moment2.default.range(_this.state.range.start, mom.toDate());
        if (!_this.props.showTime) {
          range = _this.normalizeDateRange(range);
        }

        _this.setState({
          range: range,
          preset: null,
          endText: ''
        }, _this.notifyIfAllowed);
      } else {
        _this.setState({
          endText: 'Invalid Date'
        });
      }
    };

    _this.onPresetClick = function (evt) {
      if (evt.target.tagName.toUpperCase() !== 'LI') {
        return;
      }
      var i = evt.target.getAttribute('data-preset') * 1;
      var preset = _this.props.presets[i];

      var startDate = preset.startDate;
      var endDate = preset.endDate;

      if (_lodash2.default.isFunction(startDate)) {
        startDate = startDate();
      }

      if (_lodash2.default.isFunction(endDate)) {
        endDate = endDate();
      }
      _this.setState({
        range: _moment2.default.range(startDate, endDate),
        preset: preset
      }, function () {
        _this.notifyIfAllowed();
      });
    };

    _this.onDateRangeSelect = function (range) {
      _this.setState({
        range: range,
        preset: undefined
      }, _this.notifyIfAllowed);
    };

    _this.onCancelClick = function () {
      if (_this.props.onHide) {
        _this.props.onHide();
      }
    };

    _this.onApplyClick = function () {
      _this.notify();
      if (_this.props.onHide) {
        _this.props.onHide();
      }
    };

    _this.notify = function () {
      _this.props.onChange({
        startDate: _this.state.range.start.toDate(),
        endDate: _this.state.range.end.toDate(),
        preset: _this.state.preset
      });
    };

    _this.notifyIfAllowed = function () {
      if (_this.props.autoSave) {
        _this.notify();
      }
    };

    _this.state = {
      range: _moment2.default.range(props.startDate, props.endDate),
      preset: props.preset
    };
    return _this;
  }

  (0, _createClass3.default)(DateRangePanel, [{
    key: 'getPrettyDate',
    value: function getPrettyDate(date) {
      if (this.props.showTime) {
        return (0, _moment2.default)(date).format(this.props.dateTimeFormat);
      } else {
        return (0, _moment2.default)(date).format(this.props.dateTimeFormat);
      }
    }
  }, {
    key: 'getFullDate',
    value: function getFullDate(date) {
      if (this.props.showTime) {
        return (0, _moment2.default)(date).format(this.props.inputDateTimeFormat);
      } else {
        return (0, _moment2.default)(date).format(this.props.inputDateFormat);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        { className: ['date-range-panel', this.props.className].join(' ') },
        _react2.default.createElement('div', { className: 'date-range-panel__scrim', onClick: this.onCancelClick }),
        _react2.default.createElement(
          'div',
          { className: 'date-range-panel__panel' },
          _react2.default.createElement(
            'div',
            { className: 'date-range-panel__body' },
            _react2.default.createElement(_nuviDaterangePicker2.default, {
              numberOfCalendars: this.props.numberOfCalendars,
              selectionType: 'range',
              value: this.state.range,
              minimumDate: new Date(0),
              maximumDate: new Date(),
              singleDateRange: true,
              onSelect: this.onDateRangeSelect
            }),
            this.renderPresets()
          ),
          this.renderInputs()
        )
      );
    }
  }, {
    key: 'renderPresets',
    value: function renderPresets() {
      if (this.props.presets && this.props.presets.length) {
        return _react2.default.createElement(
          'ul',
          { className: 'date-range-panel__presets', onClick: this.onPresetClick },
          this.renderPresetsList()
        );
      }
      return undefined;
    }
  }, {
    key: 'renderPresetsList',
    value: function renderPresetsList() {
      return this.props.presets.map(function (preset, i) {
        return _react2.default.createElement(
          'li',
          { key: i, 'data-preset': i },
          preset.name
        );
      });
    }
  }, {
    key: 'renderInputs',
    value: function renderInputs() {
      if (this.props.showInputs) {
        return _react2.default.createElement(
          'div',
          { className: 'date-range-panel__footer' },
          _react2.default.createElement(
            'div',
            { className: 'date-range-panel__inputs' },
            _react2.default.createElement(
              'div',
              { className: 'row' },
              _react2.default.createElement(
                'div',
                { className: 'column small-8' },
                _react2.default.createElement(
                  'div',
                  { className: 'input-wrap' },
                  _react2.default.createElement(
                    'label',
                    { htmlFor: 'startDate' },
                    'Start Date'
                  ),
                  _react2.default.createElement('input', {
                    id: 'startDate',
                    type: 'text',
                    value: this.state.startText || this.getFullDate(this.state.range.start),
                    onChange: this.onStartInputChange,
                    onBlur: this.onStartInputBlur,
                    placeholder: 'Start Date'
                  })
                ),
                _react2.default.createElement(
                  'div',
                  { className: 'input-wrap' },
                  _react2.default.createElement(
                    'label',
                    { htmlFor: 'endDate' },
                    'End Date'
                  ),
                  _react2.default.createElement('input', {
                    id: 'endDate',
                    type: 'text',
                    value: this.state.endText || this.getFullDate(this.state.range.end),
                    onChange: this.onEndInputChange,
                    onBlur: this.onEndInputBlur,
                    placeholder: 'End Date'
                  })
                )
              ),
              _react2.default.createElement(
                'div',
                { className: 'column small-4' },
                _react2.default.createElement(
                  'div',
                  { className: 'actions-wrap' },
                  _react2.default.createElement(
                    'button',
                    { onClick: this.onApplyClick, className: 'button' },
                    'Apply Range'
                  ),
                  this.renderCancel()
                )
              )
            )
          )
        );
      }
      if (!this.props.autoSave) {
        return _react2.default.createElement(
          'div',
          { className: 'date-range-panel__footer' },
          _react2.default.createElement(
            'div',
            { className: 'date-range-panel__inputs' },
            _react2.default.createElement(
              'button',
              { onClick: this.onApplyClick, className: 'button' },
              'Apply Range'
            )
          )
        );
      }
      return undefined;
    }
  }, {
    key: 'renderCancel',
    value: function renderCancel() {
      if (this.props.onHide) {
        return _react2.default.createElement(
          'button',
          { type: 'button', onClick: this.onCancelClick, className: 'button button--cancel' },
          'Cancel'
        );
      }
      return undefined;
    }
  }, {
    key: 'normalizeDateRange',
    value: function normalizeDateRange(range) {
      return _moment2.default.range(range.start.toDate(), range.end.endOf('day').toDate());
    }
  }]);
  return DateRangePanel;
}(_react2.default.Component);

DateRangePanel.propTypes = {
  autoSave: _react2.default.PropTypes.bool,
  className: _react2.default.PropTypes.string,
  dateFormat: _react2.default.PropTypes.string,
  dateTimeFormat: _react2.default.PropTypes.string,
  endDate: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.object.isRequired, _react2.default.PropTypes.func.isRequired]),
  inputDateFormat: _react2.default.PropTypes.string,
  inputDateTimeFormat: _react2.default.PropTypes.string,
  onChange: _react2.default.PropTypes.func,
  onHide: _react2.default.PropTypes.func,
  preset: _react2.default.PropTypes.object,
  presets: _react2.default.PropTypes.array,
  showInputs: _react2.default.PropTypes.bool,
  showTime: _react2.default.PropTypes.bool,
  numberOfCalendars: _react2.default.PropTypes.number,
  startDate: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.object.isRequired, _react2.default.PropTypes.func.isRequired])
};
DateRangePanel.defaultProps = {
  dateFormat: 'MMM DD',
  dateTimeFormat: 'MMM DD h:mm a',
  inputDateFormat: 'YYYY-MM-DD',
  inputDateTimeFormat: 'YYYY-MM-DD hh:mm a',
  autoSave: false,
  numberOfCalendars: 2
};
exports.default = DateRangePanel;