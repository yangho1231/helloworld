"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require("babel-runtime/core-js/object/get-prototype-of");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var pressAndHoldTime = 1000;

var ClickAndHoldButton = function (_React$Component) {
  (0, _inherits3.default)(ClickAndHoldButton, _React$Component);

  function ClickAndHoldButton(props, context) {
    (0, _classCallCheck3.default)(this, ClickAndHoldButton);

    var _this = (0, _possibleConstructorReturn3.default)(this, (ClickAndHoldButton.__proto__ || (0, _getPrototypeOf2.default)(ClickAndHoldButton)).call(this, props, context));

    _this.animateButtonHold = _this.animateButtonHold.bind(_this);
    _this.onMouseDown = _this.onMouseDown.bind(_this);
    _this.onMouseLeave = _this.onMouseLeave.bind(_this);
    _this.onMouseUp = _this.onMouseUp.bind(_this);

    _this.state = {
      buttonPressedTime: null
    };
    return _this;
  }

  (0, _createClass3.default)(ClickAndHoldButton, [{
    key: "onMouseDown",
    value: function onMouseDown() {
      this.setState({
        buttonPressedTime: new Date().getTime()
      });

      if (window.requestAnimationFrame) {
        window.requestAnimationFrame(this.animateButtonHold);
      } else if (window.webkitRequestAnimationFrame) {
        window.webkitRequestAnimationFrame(this.animateButtonHold);
      } else if (window.mozRequestAnimationFrame) {
        window.mozRequestAnimationFrame(this.animateButtonHold);
      } else if (window.oRequestAnimationFrame) {
        window.oRequestAnimationFrame(this.animateButtonHold);
      }
    }
  }, {
    key: "onMouseUp",
    value: function onMouseUp() {
      this.setState({
        buttonPressedTime: null,
        percentComplete: 0
      });
    }
  }, {
    key: "onMouseLeave",
    value: function onMouseLeave() {
      this.setState({
        buttonPressedTime: null,
        percentComplete: 0
      });
    }
  }, {
    key: "render",
    value: function render() {
      var className = "btn btn--click-and-hold " + this.props.className;
      var showInstruction = this.props.showInstruction === undefined || this.props.showInstruction === true;
      return _react2.default.createElement(
        "button",
        { className: className, onMouseDown: this.onMouseDown, onMouseUp: this.onMouseUp, onMouseLeave: this.onMouseLeave },
        this.props.text,
        _react2.default.createElement("div", { className: "btn--click-and-hold__progress-bar", style: { width: this.state.percentComplete * 100 + "%" } }),
        showInstruction ? _react2.default.createElement(
          "div",
          { className: "btn--click-and--hold__instruction" },
          "Click and hold"
        ) : ''
      );
    }
  }, {
    key: "animateButtonHold",
    value: function animateButtonHold() {
      if (this.state.buttonPressedTime) {
        var elapsed = new Date().getTime() - this.state.buttonPressedTime; // in ms

        var pct = elapsed / pressAndHoldTime;
        if (pct > 1.05) {
          this.props.onClickAndHold();
          return;
        }

        this.setState({
          percentComplete: pct > 1 ? 1 : pct
        });

        if (window.requestAnimationFrame) {
          window.requestAnimationFrame(this.animateButtonHold);
        } else if (window.webkitRequestAnimationFrame) {
          window.webkitRequestAnimationFrame(this.animateButtonHold);
        } else if (window.mozRequestAnimationFrame) {
          window.mozRequestAnimationFrame(this.animateButtonHold);
        } else if (window.oRequestAnimationFrame) {
          window.oRequestAnimationFrame(this.animateButtonHold);
        }
      }
    }
  }]);
  return ClickAndHoldButton;
}(_react2.default.Component);

ClickAndHoldButton.propTypes = {
  className: _react2.default.PropTypes.string,
  text: _react2.default.PropTypes.string.isRequired,
  onClickAndHold: _react2.default.PropTypes.func.isRequired,
  showInstruction: _react2.default.PropTypes.bool
};

exports.default = ClickAndHoldButton;