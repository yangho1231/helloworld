'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _numeral = require('numeral');

var _numeral2 = _interopRequireDefault(_numeral);

var _CompanySelectorItem = require('./CompanySelectorItem');

var _CompanySelectorItem2 = _interopRequireDefault(_CompanySelectorItem);

var _WaitIndicator = require('./WaitIndicator');

var _WaitIndicator2 = _interopRequireDefault(_WaitIndicator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MAX_COMPANIES_RENDER = 5;

var CompanySelector = function (_React$Component) {
  (0, _inherits3.default)(CompanySelector, _React$Component);

  function CompanySelector() {
    var _ref;

    (0, _classCallCheck3.default)(this, CompanySelector);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = (0, _possibleConstructorReturn3.default)(this, (_ref = CompanySelector.__proto__ || (0, _getPrototypeOf2.default)(CompanySelector)).call.apply(_ref, [this].concat(args)));

    _this.state = {};
    _this.onCompanySelect = _this.onCompanySelect.bind(_this);
    _this.onMouseLeave = _this.onMouseLeave.bind(_this);
    _this.onMouseMove = _this.onMouseMove.bind(_this);
    _this.onMouseDown = _this.onMouseDown.bind(_this);
    _this.onSearchKeyDown = _this.onSearchKeyDown.bind(_this);
    _this.onSearchKeyUp = _this.onSearchKeyUp.bind(_this);
    _this.onScrimClick = _this.onScrimClick.bind(_this);
    _this.onCompanySettings = _this.onCompanySettings.bind(_this);
    return _this;
  }

  (0, _createClass3.default)(CompanySelector, [{
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      if (this.search && !this.searchHasFocus()) {
        this.search.focus();
      }
    }
  }, {
    key: 'onMouseDown',
    value: function onMouseDown() {
      this.setState({
        highlightedIndex: -1
      });
    }
  }, {
    key: 'onMouseMove',
    value: function onMouseMove() {
      if (this.hideTimeout) {
        window.clearTimeout(this.hideTimeout);
        delete this.hideTimeout;
      }
    }
  }, {
    key: 'onMouseLeave',
    value: function onMouseLeave() {
      var _this2 = this;

      this.hideTimeout = window.setTimeout(function () {
        _this2.hide();
      }, 1000);
    }
  }, {
    key: 'onSearchKeyDown',
    value: function onSearchKeyDown(evt) {
      var companies = this.filteredCompanies();
      if (evt.keyCode === 8 && !this.searchHasFocus()) {
        evt.preventDefault();
      } else if (evt.keyCode === 40) {
        // down
        evt.preventDefault();
        var highlightedIndex = this.state.highlightedIndex + 1;
        if (highlightedIndex >= companies.length) {
          highlightedIndex = 0;
        }
        this.setState({
          highlightedIndex: highlightedIndex
        });
      } else if (evt.keyCode === 38) {
        // up
        evt.preventDefault();
        var _highlightedIndex = this.state.highlightedIndex - 1;
        if (_highlightedIndex < -1) {
          _highlightedIndex = companies.length - 1;
        }
        this.setState({
          highlightedIndex: _highlightedIndex
        });
      } else if (evt.keyCode === 27) {
        // escape
        this.hide();
      } else if (evt.keyCode === 13) {
        // enter
        if (this.state.highlightedIndex > -1) {
          this.setCompany(companies[this.state.highlightedIndex]);
        }
      }
    }
  }, {
    key: 'onSearchKeyUp',
    value: function onSearchKeyUp(evt) {
      var filterText = evt.target.value;
      if (filterText !== this.state.filterText) {
        this.setState({
          filterText: filterText,
          highlightedIndex: -1
        });
      }
    }
  }, {
    key: 'onCompanySelect',
    value: function onCompanySelect(company) {
      var _this3 = this;

      this.setState({
        highlightedIndex: -1
      }, function () {
        _this3.setCompany(company);
      });
    }
  }, {
    key: 'onCompanySettings',
    value: function onCompanySettings(company) {
      window.location = '/settings/' + company.slug + '/company_settings/';
    }
  }, {
    key: 'onScrimClick',
    value: function onScrimClick() {
      this.hide();
    }
  }, {
    key: 'setCompany',
    value: function setCompany(company) {
      var currentCompany = this.props.currentCompany || {};
      if (company.guid !== currentCompany.guid) {
        var url = this.props.location.basename || '';
        if (currentCompany.slug && _lodash2.default.endsWith(url, '/' + currentCompany.slug)) {
          url = url.substr(0, url.length - (currentCompany.slug.length + 1));
          url = url + '/' + company.slug;
        }
        if (_lodash2.default.keys(this.props.params).length === 0) {
          // no params, so not dynamic
          var pathname = this.props.location.pathname || '';
          if (pathname.substr(0, 1) === '/') {
            pathname = pathname.substr(1);
          }
          if (currentCompany.slug && pathname.substr(0, currentCompany.slug.length + 1) === currentCompany.slug + '/') {
            pathname = pathname.substr(currentCompany.slug.length + 1);
            pathname = company.slug + '/' + pathname;
          } else if (currentCompany.slug && pathname === currentCompany.slug) {
            pathname = company.slug;
          }
          if (pathname.length && pathname !== '/') {
            url = url + '/' + pathname;
          }
        }
        this.setState({
          switchingCompany: company
        }, function () {
          window.location.href = url;
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var className = ['company-selector'];
      if (this.shouldShowSearch()) {
        className.push('company-selector--with-search');
      }
      return _react2.default.createElement(
        'div',
        { className: className.join(' ') },
        _react2.default.createElement('div', { className: 'company-selector__scrim scrim', onClick: this.onScrimClick }),
        this.renderLoading(),
        _react2.default.createElement(
          'div',
          { className: 'company-selector__container' },
          _react2.default.createElement(
            'div',
            { className: 'company-selector__head' },
            _react2.default.createElement(
              'div',
              { className: 'company-selector__title' },
              'Your Companies'
            ),
            this.renderSearch()
          ),
          this.renderList(),
          this.renderCreateCompany()
        )
      );
    }
  }, {
    key: 'renderAdditionalMessage',
    value: function renderAdditionalMessage(filteredCompanies) {
      if (this.props.companies.length > 150 && filteredCompanies.length > 150) {
        var companyLengthForMessage = this.props.companies.length;
        if (this.state.filterText) {
          companyLengthForMessage = filteredCompanies.length;
        }
        return _react2.default.createElement(
          'li',
          { className: 'company-selector__list__message-element' },
          _react2.default.createElement(
            'div',
            { className: 'company-selector__list__additional-message' },
            (0, _numeral2.default)(companyLengthForMessage - 150).format('0,0') + ' not displayed',
            _react2.default.createElement(
              'div',
              null,
              'Refine search to view more'
            )
          )
        );
      }
      return undefined;
    }
  }, {
    key: 'renderSearch',
    value: function renderSearch() {
      var _this4 = this;

      if (this.shouldShowSearch()) {
        return _react2.default.createElement(
          'div',
          { className: 'company-selector__search' },
          _react2.default.createElement('input', {
            placeholder: 'Type To Search',
            onKeyUp: this.onSearchKeyUp,
            onKeyDown: this.onSearchKeyDown,
            type: 'search',
            ref: function ref(n) {
              return _this4.search = n;
            },
            autoFocus: true
          })
        );
      }
      return undefined;
    }
  }, {
    key: 'renderList',
    value: function renderList() {
      var _this5 = this;

      var companies = this.filteredCompanies();

      if (companies.length > 0) {
        var displayedCompanies = companies.slice(0, MAX_COMPANIES_RENDER);
        var companiesEls = displayedCompanies.map(function (company, i) {
          var className = ['company-selector__company'];
          if (i === _this5.state.highlightedIndex) {
            className.push('company-selector__company--highlighted');
          }
          if (company.guid === _this5.props.currentCompany.guid) {
            className.push('company-selector__company--current');
          }
          return _react2.default.createElement(_CompanySelectorItem2.default, {
            key: company.guid,
            className: className.join(' '),
            onSelect: _this5.onCompanySelect,
            onSettings: _this5.onCompanySettings,
            company: company
          });
        });

        return _react2.default.createElement(
          'ul',
          { className: 'company-selector__list' },
          companiesEls,
          this.renderAdditionalMessage(companies)
        );
      }
      return _react2.default.createElement(
        'ul',
        { className: 'company-selector__list' },
        _react2.default.createElement(
          'div',
          { className: 'company-selector__list__zero-state' },
          'No matches for "' + this.state.filterText + '"'
        )
      );
    }
  }, {
    key: 'renderLoading',
    value: function renderLoading() {
      if (this.state.switchingCompany) {
        return _react2.default.createElement(
          'div',
          { className: 'company-selector__loading' },
          _react2.default.createElement(
            'div',
            { className: 'company-selector__loading__content' },
            _react2.default.createElement(_WaitIndicator2.default, null),
            _react2.default.createElement(
              'div',
              { className: 'company-selector__loading__content__message' },
              'Switching to',
              _react2.default.createElement('br', null),
              _react2.default.createElement(
                'strong',
                { className: 'company-selector__loading__content__message_name' },
                this.state.switchingCompany.name
              )
            )
          )
        );
      }
      return undefined;
    }
  }, {
    key: 'renderCreateCompany',
    value: function renderCreateCompany() {
      if (this.props.showCreateCompany) {
        return _react2.default.createElement(
          'a',
          { className: 'company-selector__create' },
          _react2.default.createElement(
            'div',
            { className: 'company-selector__create__container' },
            _react2.default.createElement('i', { className: 'icon icon--plus' }),
            ' Create Company'
          )
        );
      }
      return undefined;
    }
  }, {
    key: 'filteredCompanies',
    value: function filteredCompanies() {
      var filterText = (this.state.filterText || '').toLowerCase();
      var chain = _lodash2.default.chain(this.props.companies);
      if (filterText) {
        chain = chain.filter(function (company) {
          return (company.name || '').toLowerCase().indexOf(filterText) !== -1;
        });
      }
      return chain.sortBy('name').value();
    }
  }, {
    key: 'searchHasFocus',
    value: function searchHasFocus() {
      return this.search && this.search.matches(':focus');
    }
  }, {
    key: 'shouldShowSearch',
    value: function shouldShowSearch() {
      return this.props.companies.length >= MAX_COMPANIES_RENDER;
    }
  }, {
    key: 'hide',
    value: function hide() {
      if (this.props.onHide) {
        this.props.onHide();
      }
    }
  }]);
  return CompanySelector;
}(_react2.default.Component);

CompanySelector.propTypes = {
  currentCompany: _react2.default.PropTypes.object,
  companies: _react2.default.PropTypes.array.isRequired,
  className: _react2.default.PropTypes.string,
  location: _react2.default.PropTypes.object.isRequired,
  params: _react2.default.PropTypes.object.isRequired,
  onHide: _react2.default.PropTypes.func,
  showCreateCompany: _react2.default.PropTypes.bool
};
exports.default = CompanySelector;