'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _nuviDaterangePicker = require('nuvi-daterange-picker');

var _nuviDaterangePicker2 = _interopRequireDefault(_nuviDaterangePicker);

var _DateTimePickerClock = require('./DateTimePickerClock');

var _DateTimePickerClock2 = _interopRequireDefault(_DateTimePickerClock);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var dateType = _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.number, _react2.default.PropTypes.instanceOf(Date), _react2.default.PropTypes.instanceOf((0, _moment2.default)().constructor), _react2.default.PropTypes.object]);

var DateTimePicker = function (_Component) {
  (0, _inherits3.default)(DateTimePicker, _Component);

  function DateTimePicker() {
    var _ref;

    (0, _classCallCheck3.default)(this, DateTimePicker);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = (0, _possibleConstructorReturn3.default)(this, (_ref = DateTimePicker.__proto__ || (0, _getPrototypeOf2.default)(DateTimePicker)).call.apply(_ref, [this].concat(args)));

    _this.onDateChange = _this.onDateChange.bind(_this);
    _this.onTimeChange = _this.onTimeChange.bind(_this);
    return _this;
  }

  (0, _createClass3.default)(DateTimePicker, [{
    key: 'onDateChange',
    value: function onDateChange(newDate) {
      var date = (0, _moment2.default)(this.props.date);
      var year = newDate.year();
      var month = newDate.month();
      var day = newDate.date();

      date.year(year);
      date.month(month);
      date.date(day);

      if (this.props.onChange) {
        this.props.onChange(date.toDate());
      }
    }
  }, {
    key: 'onTimeChange',
    value: function onTimeChange(newTime) {
      var date = (0, _moment2.default)(this.props.date);
      date.hour(newTime.hour());
      date.minute(newTime.minute());
      this.props.onChange(date.toDate());
    }
  }, {
    key: 'render',
    value: function render() {
      var currentDate = (0, _moment2.default)(this.props.date);
      currentDate.format('YYYY-MM-DD HH:mm a Z');
      return _react2.default.createElement(
        'div',
        { className: 'post-scheduler' },
        _react2.default.createElement(_nuviDaterangePicker2.default, {
          numberOfCalendars: 1,
          selectionType: 'single',
          minimumDate: this.props.minimumDate ? (0, _moment2.default)(this.props.minimumDate).toDate() : undefined,
          maximumDate: this.props.maximumDate ? (0, _moment2.default)(this.props.maximumDate).toDate() : undefined,
          onSelect: this.onDateChange,
          value: currentDate
        }),
        _react2.default.createElement('input', {
          className: 'selected-cal-date',
          type: 'text',
          placeholder: 'Select a day',
          value: currentDate.format(this.props.format),
          readOnly: true
        }),
        _react2.default.createElement(_DateTimePickerClock2.default, {
          date: currentDate,
          onChange: this.onTimeChange
        })
      );
    }
  }]);
  return DateTimePicker;
}(_react.Component);

DateTimePicker.propTypes = {
  date: dateType,
  format: _react2.default.PropTypes.string,
  maximumDate: dateType,
  minimumDate: dateType, // Moment.js Object
  onChange: _react2.default.PropTypes.func.isRequired
};
DateTimePicker.defaultProps = {
  format: 'LL'
};
exports.default = DateTimePicker;